write_to_file <-paste(write_to_file,pt[1,pt$prototype])
testname<-paste(function_name.i,"_test",sep="")
unittest<-gsub(" ","",paste(fun_name,"_random_datatypes"))
write_to_file <- paste0(write_to_file,"\n","TEST(",unittest,",",testname,")","{","\n")
#obj <-gsub( "\\s+", " " ,paste(in_package,tolower(in_package),";","\n"))
#write(obj,filename,append = TRUE)
for(filestream.j in 1:nrow( functions.rows )){
write_to_file<-paste0(write_to_file,"std::ofstream ", functions.rows[filestream.j,argument.name],"_stream",";\n")
}
write_to_file<-paste(write_to_file,"RInside();\n")
for(argument.i in 1:nrow(functions.rows)){
create_makefile(package_name,functions.rows[argument.i,funName])
variable <- gsub( "\\s+", " " ,paste( functions.rows [argument.i,argument.type], functions.rows [argument.i,argument.name]))
name <- (gsub("Rcpp::","", functions.rows [argument.i,argument.type]))
st_val <- gsub(" ","",paste("=","RcppDeepState_",(name),"()",";\n"))
file_open <- gsub("# ","\"",paste0( functions.rows [argument.i,argument.name],"_stream.open(#", functions.rows [argument.i,argument.name],"# );","\n",
functions.rows [argument.i,argument.name],"_stream<<", functions.rows [argument.i,argument.name],";","\n",
"std::cout <<# ",functions.rows[argument.i,argument.name]," values: # <<",functions.rows[argument.i,argument.name],"<< std::endl;","\n",
functions.rows [argument.i,argument.name],"_stream.close();","\n"))
write_to_file <-paste(write_to_file,variable,st_val,file_open)
}
write_to_file<-paste(write_to_file,"try{\n", sub("\\)","",sub("\\(","",pt[1,calls])))
write_to_file<-gsub("#","\"",paste0(write_to_file,"\n","}\n","catch(Rcpp::exception& e){\n","std::cout<<#Exception Handled#<<std::endl;\n}"))
write_to_file<-paste(write_to_file,"\n","}")
write(write_to_file,filename,append=TRUE)
}
return ("Testharness created!!")
}
deepstate_pkg_create("~/R/testUBSAN")
getwd()
error.dt <- nc::capture_all_str(
"read_out_of_bound_log",
"ERROR: ",
state=".*",
input="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt
error.dt <- nc::capture_all_str(
"read_out_of_bound_log",
input="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt
error.dt <- nc::capture_all_str(
"read_out_of_bound_log",
input=".*?",
":",
value = ".*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt
error.dt <- nc::capture_all_str(
"read_out_of_bound_log",
arg.name=".*?",
"values",
value = ".*?",
"\n",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt
error.dt <- nc::capture_all_str(
"read_out_of_bound_log",
arg.name=".*?",
" values",
value = ".*?",
"\n",
error.dt <- nc::capture_all_str(
"read_out_of_bound_log",
arg.name=".*?",
" values",
value = ".*?")
error.dt
error.dt <- nc::capture_all_str(
"read_out_of_bound_log",
arg.name=".*?",
" values",
value = ".*?")
error.dt
error.dt <- nc::capture_all_str(
"read_out_of_bound_log",
arg.name=".*?",
" values: ",
value = ".*?")
error.dt
error.dt <- nc::capture_all_str(
"read_out_of_bound_log",
arg.name=".*?",
" values: ",
value = ".*")
error.dt
error.dt <- nc::capture_all_str(
"read_out_of_bound_log",
arg.name=".*?",
" values: ",
value = ".*",
"\n",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt
error.dt <- nc::capture_all_str(
"read_out_of_bound_log",
arg.name=".*?",
" values: ",
value=".*",
"\n",
errortrace="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt
error.dt <- nc::capture_all_str(
"read_out_of_bound_log",
arg.name=".*?",
" values: ",
value=".*",
"\n",
errortrace="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt
error.dt <- nc::capture_all_str(
"write_index_outofbound_log",
arg.name=".*?",
" values: ",
value=".*",
"\n",
errortrace="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt
file<-nc::capture_first_vec("write_index_outofbound_log","Command: ",
file=".*?")
file<-nc::capture_first_vec("write_index_outofbound_log","Command: ",
file=".*")
file<-nc::capture_all_str("write_index_outofbound_log","Command: ",
file=".*")
error.dt
file
file<-nc::capture_all_str("write_index_outofbound_log","Command: ",
file=".*",
" ",
fuzz=".*")
file
file<-nc::capture_all_str("write_index_outofbound_log","Command: ",
file=".*",
"_DeepState_TestHarness ",
fuzz=".*")
file
file<-nc::capture_all_str("write_index_outofbound_log","Command: ",
file=".*",
"_DeepState_TestHarness --fuzz")
file
file<-nc::capture_all_str("write_index_outofbound_log","Command: ./",
file=".*",
"_DeepState_TestHarness --fuzz")
file
error.dt[, error.i := 1:.N]
files.list<-nc::capture_all_str("write_index_outofbound_log","Command: ./",
file.name=".*",
"_DeepState_TestHarness --fuzz")
error.dt[, src.file.lines := {
file.line.dt <- nc::capture_all_str(
errortrace,
file.line="[^ ]+?:[0-9]+")
file.line.dt[grepl(files.list$file.name, file.line), paste(file.line, collapse="\n")]
}, by=error.i]
error.dt
error.dt <- nc::capture_all_str(
"write_index_outofbound_log",
arg.name=".*?",
" values: ",
value=".*",
"\n",
errortrace="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt
error.dt <- nc::capture_all_str(
"read_out_of_bound_log",
arg.name=".*?",
" values: ",
value=".*",
"\n",
errortrace="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt
files.list<-nc::capture_all_str("write_index_outofbound_log","Command: ./",
file.name=".*",
"_DeepState_TestHarness --fuzz")
files.list
error.dt[, error.i := 1:.N]
error.dt
error.dt[, src.file.lines := {
file.line.dt <- nc::capture_all_str(
errortrace,
file.line="[^ ]+?:[0-9]+")
file.line.dt[grepl(paste(files.list$file.name,".cpp"), file.line), paste(file.line, collapse="\n")]
}, by=error.i]
error.dt
paste(files.list$file.name,".cpp")
error.dt[, src.file.lines := {
file.line.dt <- nc::capture_all_str(
errortrace,
file.line="[^ ]+?:[0-9]+")
file.line.dt[grepl(paste0(files.list$file.name,".cpp"), file.line), paste(file.line, collapse="\n")]
}, by=error.i]
error.dt
paste0(files.list$file.name,".cpp")
files.list<-nc::capture_all_str("read_out_of_bound_log","Command: ./",
file.name=".*",
"_DeepState_TestHarness --fuzz")
paste0(files.list$file.name,".cpp")
error.dt[, src.file.lines := {
file.line.dt <- nc::capture_all_str(
errortrace,
file.line="[^ ]+?:[0-9]+")
file.line.dt[grepl(paste0(files.list$file.name,".cpp"), file.line), paste(file.line, collapse="\n")]
}, by=error.i]
error.dt
count.dt <- error.dt[, .(
count=.N
), by=.(sanitizer, error.type, src.file.lines)]
error.dt[, src.file.lines := {
file.line.dt <- nc::capture_all_str(
errortrace,
file.line="[^ ]+?:[0-9]+")
file.line.dt[grepl(paste0(files.list$file.name,".cpp"), file.line)] #paste(file.line, collapse="\n")]
}, by=error.i]
error.dt
error.dt[, src.file.lines := {
file.line.dt <- nc::capture_all_str(
heapsum,
file.line="[^ ]+?:[0-9]+")
file.line.dt[grepl(paste0(files.list$file.name,".cpp"), file.line)] #paste(file.line, collapse="\n")]
}, by=error.i]
error.dt
error.dt[,src.file.lines=gsub("(","",src.file.lines)]
error.dt[, src.file.lines := {
file.line.dt <- nc::capture_all_str(
heapsum,
file.line="[^ ]+?:[0-9]+")
file.line.dt[grepl(paste0(files.list$file.name,".cpp"), file.line),paste(file.line, collapse="\n")]
}, by=error.i]
error.dt
error.dt[,src.file.lines:={gsub("(","",src.file.lines)}]
error.dt[,src.file.lines:={gsub("\(","",src.file.lines)}]
error.dt[,src.file.lines:={gsub(""\(","",src.file.lines)}]
error.dt[, src.file.lines := {
file.line.dt <- nc::capture_all_str(
heapsum,"(",
file.line="[^ ]+?:[0-9]+")
file.line.dt[grepl(paste0(files.list$file.name,".cpp"), file.line),paste(file.line, collapse="\n")]
}, by=error.i]
error.dt[, src.file.lines := {
file.line.dt <- nc::capture_all_str(
heapsum,
file.line="[^()]+?:[0-9]+")
file.line.dt[grepl(paste0(files.list$file.name,".cpp"), file.line),paste(file.line, collapse="\n")]
}, by=error.i]
error.dt
error.dt <- nc::capture_all_str(
"read_out_of_bound_log",
arg.name=".*?",
" values: ",
count.dt <- error.dt[, .(
count=.N
), by=.(arg.name,value,src.file.lines)]
)
error.dt
count.dt <- error.dt[, .(
count=.N
), by=.(arg.name,value,src.file.lines)]
count.dt
error.dt$errortrace
error.msg <- nc::capture_all_str(error.dt$error.trace,
err.msg=".*?\n\n")
error.dt$errortrace
error.msg <- nc::capture_all_str(error.dt$errortrace,
err.msg=".*?\n\n")
error.msg$err.msg
error.msg <- nc::capture_all_str(error.dt$errortrace,
err.msg=".*?")
error.msg$err.msg
error.msg <- nc::capture_all_str(error.dt$errortrace,
err.msg=".*")
error.msg$err.msg
error.msg <- nc::capture_all_str(error.dt$errortrace,
"\n",err.msg=".*")
error.msg$err.msg
error.msg <- nc::capture_first_vec(error.dt$errortrace,
"\n",err.msg=".*")
error.msg$err.msg
count.dt <- error.dt[, .(
count=.N
), by=.(arg.name,value,src.file.lines,error.msg$err.msg)]
count.dt
error.msg <- nc::capture_first_vec(error.dt$errortrace,
"\n",err.msg="[^==0-9==].*")
error.msg <- nc::capture_first_vec(error.dt$errortrace,
"\n",err.msg="[^==[0-9]+==].*")
error.msg <- nc::capture_first_vec(error.dt$errortrace,
"\n",err.msg="[^(==[0-9]+==)].*")
error.msg <- nc::capture_first_vec(error.dt$errortrace,
"\n",err.msg="[^==[0-9]+==)].*")
error.msg <- nc::capture_first_vec(error.dt$errortrace,
"\n",err.msg="[^==]+?:[0-9]+.*")
error.msg <- nc::capture_first_vec(error.dt$errortrace,
"\n",err.msg=".*")
count.dt
error.dt <- nc::capture_all_str(
"read_out_of_bound_log",
arg.name=".*?",
" values: ",
value=".*",
"\n",
"==[0-9]+==",
errortrace="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
count.dt <- error.dt[, .(
count=.N
), by=.(arg.name,value,src.file.lines,error.msg$err.msg)]
files.list<-nc::capture_all_str("read_out_of_bound_log","Command: ./",
file.name=".*",
"_DeepState_TestHarness --fuzz")
error.dt[, error.i := 1:.N]
error.dt[, src.file.lines := {
file.line.dt <- nc::capture_all_str(
heapsum,
file.line="[^()]+?:[0-9]+")
file.line.dt[grepl(paste0(files.list$file.name,".cpp"), file.line),paste(file.line, collapse="\n")]
}, by=error.i]
count.dt <- error.dt[, .(
count=.N
), by=.(arg.name,value,src.file.lines,error.msg$err.msg)]
error.msg <- nc::capture_first_vec(error.dt$errortrace,
"\n",err.msg=".*")
error.dt <- nc::capture_all_str(
"read_out_of_bound_log",
arg.name=".*?",
" values: ",
value=".*",
"\n",
"==[0-9]+==",
errortrace="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt
error.dt <- nc::capture_all_str(
"read_out_of_bound_log",
arg.name=".*?",
" values: ",
value=".*",
"\n",
errortrace="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
files.list<-nc::capture_all_str("read_out_of_bound_log","Command: ./",
file.name=".*",
"_DeepState_TestHarness --fuzz")
error.dt[, error.i := 1:.N]
error.dt[, src.file.lines := {
file.line.dt <- nc::capture_all_str(
heapsum,
file.line="[^()]+?:[0-9]+")
file.line.dt[grepl(paste0(files.list$file.name,".cpp"), file.line),paste(file.line, collapse="\n")]
}, by=error.i]
error.msg <- nc::capture_first_vec(error.dt$errortrace,
"\n",err.msg=".*")
count.dt <- error.dt[, .(
count=.N
), by=.(arg.name,value,src.file.lines,error.msg$err.msg)]
count.dt
count.dt <- error.dt[, .(
count=.N
), by=.(arg.name,value,src.file.lines,error.msg$err.msg)]
error.msg <- nc::capture_first_vec(error.dt$errortrace,
"\n",
"==[0-9]+== "
err.msg=".*")
error.msg <- nc::capture_first_vec(error.dt$errortrace,
"\n",
"==[0-9]+== ",
err.msg=".*")
count.dt <- error.dt[, .(
count=.N
), by=.(arg.name,value,src.file.lines,error.msg$err.msg)]
count.dt
count.dt <- error.dt[, .(
count=.N
), by=.(arg.name,value,src.file.lines,gsub("==[0-9]+==","",error.msg$err.msg))]
count.dt
error.msg <- nc::capture_first_vec(error.dt$errortrace,
"\n",
err.msg=".*")
count.dt <- error.dt[, .(
count=.N
), by=.(arg.name,value,src.file.lines,gsub("==[0-9]+==","",error.msg$err.msg))]
count.dt
error.dt <- nc::capture_all_str(
"use_after_free_log",
arg.name=".*?",
" values: ",
value=".*",
"\n",
errortrace="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
user_error_display<-function(logfile){
error.dt <- nc::capture_all_str(
logfile,
arg.name=".*?",
" values: ",
value=".*",
"\n",
errortrace="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
files.list<-nc::capture_all_str(logfile,"Command: ./",
file.name=".*",
"_DeepState_TestHarness --fuzz")
error.dt[, error.i := 1:.N]
error.dt[, src.file.lines := {
file.line.dt <- nc::capture_all_str(
heapsum,
file.line="[^()]+?:[0-9]+")
file.line.dt[grepl(paste0(files.list$file.name,".cpp"), file.line),paste(file.line, collapse="\n")]
}, by=error.i]
error.msg <- nc::capture_first_vec(error.dt$errortrace,
"\n",
err.msg=".*")
count.dt <- error.dt[, .(
count=.N
), by=.(arg.name,value,src.file.lines,gsub("==[0-9]+==","",error.msg$err.msg))]
return(count.dt)
}
